#!/bin/bash
#
# Quick cleanup wrapper for the eyeVsAI project.
#
# This script provides convenient shortcuts for common cleanup operations.
#
# Usage:
#     ./clean help              # Show this help
#     ./clean status            # Show disk usage analysis
#     ./clean safe              # Safe cleanup (cache, logs, temp files)
#     ./clean logs              # Clean only log files
#     ./clean checkpoints       # Clean training checkpoints
#     ./clean failed            # Clean failed training runs
#     ./clean old [days]        # Clean old models (default: 30 days)
#     ./clean versions [keep]   # Keep only N newest versions (default: 5)
#     ./clean preview           # Preview what would be cleaned
#     ./clean all               # Clean everything (with confirmation)
#

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLEANUP_SCRIPT="$PROJECT_ROOT/cleanup.py"
PRODUCTION_CLEANUP="$PROJECT_ROOT/models/production/scripts/cleanup_production.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
show_help() {
    echo -e "${BLUE}EyeVsAI Project Cleanup Tool${NC}"
    echo
    echo "Usage: $0 <command> [options]"
    echo
    echo -e "${GREEN}Analysis Commands:${NC}"
    echo "  status              Show disk usage analysis"
    echo "  preview             Preview what would be cleaned (dry run)"
    echo
    echo -e "${GREEN}Safe Cleanup Commands:${NC}"
    echo "  safe                Clean cache, logs, and temp files"
    echo "  logs                Clean only log files"
    echo "  cache               Clean Python cache files"
    echo "  temp                Clean temporary files"
    echo "  failed              Clean failed training runs"
    echo
    echo -e "${YELLOW}Moderate Risk Commands:${NC}"
    echo "  checkpoints         Clean training checkpoints (~48GB)"
    echo "  old [days]          Clean models older than N days (default: 30)"
    echo "  versions [keep]     Keep only N newest versions per model (default: 5)"
    echo "  tuning [days]       Clean tuning logs older than N days (default: 7)"
    echo
    echo -e "${RED}High Risk Commands:${NC}"
    echo "  notebooks           Clean notebook data copies (~63GB)"
    echo "  downloads           Clean downloaded datasets (~4GB)"
    echo "  all                 Clean everything (with confirmation)"
    echo
    echo -e "${BLUE}Examples:${NC}"
    echo "  $0 status           # Check current disk usage"
    echo "  $0 safe             # Safe weekly maintenance"
    echo "  $0 old 14           # Clean models older than 14 days"
    echo "  $0 versions 3       # Keep only 3 newest versions per model"
    echo "  $0 preview          # See what would be cleaned"
}

run_main_cleanup() {
    python "$CLEANUP_SCRIPT" "$@"
}

run_production_cleanup() {
    cd "$PROJECT_ROOT/models/production"
    python scripts/cleanup_production.py "$@"
}

# Main command processing
case "${1:-help}" in
    help|--help|-h)
        show_help
        ;;
    
    status|analyze)
        echo -e "${BLUE}üìä Analyzing disk usage...${NC}"
        run_main_cleanup --analyze
        echo
        echo -e "${BLUE}üìä Production training analysis...${NC}"
        run_production_cleanup --analyze
        ;;
    
    preview|dry-run)
        echo -e "${BLUE}üîç Preview: Main cleanup${NC}"
        run_main_cleanup --dry-run --all
        echo
        echo -e "${BLUE}üîç Preview: Production cleanup${NC}" 
        run_production_cleanup --dry-run --all
        ;;
    
    safe)
        echo -e "${GREEN}üßπ Running safe cleanup...${NC}"
        run_main_cleanup --cache --logs --temp-models --jupyter-checkpoints
        run_production_cleanup --failed-runs --temp-files
        echo -e "${GREEN}‚úÖ Safe cleanup completed${NC}"
        ;;
    
    logs)
        echo -e "${GREEN}üßπ Cleaning log files...${NC}"
        run_main_cleanup --logs
        ;;
    
    cache)
        echo -e "${GREEN}üßπ Cleaning cache files...${NC}"
        run_main_cleanup --cache --jupyter-checkpoints
        ;;
    
    temp)
        echo -e "${GREEN}üßπ Cleaning temporary files...${NC}"
        run_main_cleanup --temp-models
        run_production_cleanup --temp-files
        ;;
    
    failed)
        echo -e "${GREEN}üßπ Cleaning failed training runs...${NC}"
        run_production_cleanup --failed-runs
        ;;
    
    checkpoints)
        echo -e "${YELLOW}‚ö†Ô∏è  Cleaning training checkpoints...${NC}"
        run_main_cleanup --checkpoints
        ;;
    
    old)
        DAYS=${2:-30}
        echo -e "${YELLOW}üßπ Cleaning models older than $DAYS days...${NC}"
        run_main_cleanup --old-models --days "$DAYS"
        ;;
    
    versions)
        KEEP=${2:-5}
        echo -e "${YELLOW}üßπ Keeping only $KEEP newest versions per model...${NC}"
        run_production_cleanup --old-versions --keep "$KEEP"
        ;;
    
    tuning)
        DAYS=${2:-7}
        echo -e "${YELLOW}üßπ Cleaning tuning logs older than $DAYS days...${NC}"
        run_production_cleanup --tuning-logs --days "$DAYS"
        ;;
    
    notebooks)
        echo -e "${RED}‚ö†Ô∏è  Cleaning notebook data copies (LARGE FILES)...${NC}"
        run_main_cleanup --notebooks-data
        ;;
    
    downloads)
        echo -e "${RED}‚ö†Ô∏è  Cleaning downloaded datasets...${NC}"
        run_main_cleanup --data-downloads
        ;;
    
    all)
        echo -e "${RED}üßπ Running comprehensive cleanup...${NC}"
        run_main_cleanup --all
        run_production_cleanup --all
        ;;
    
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo
        show_help
        exit 1
        ;;
esac